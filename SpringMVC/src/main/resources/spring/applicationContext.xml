<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.3.xsd
         http://www.springframework.org/schema/mvc
         http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
         http://www.springframework.org/schema/beans ">

    <mvc:annotation-driven/><!-- 驱动声明，2.0以上版本可以省略 -->
    <!-- ①：对com.springmvc.controller包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
    <context:component-scan base-package="com.springmvc.controller"></context:component-scan>
    <!-- ②：对com.springmvc.service包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
    <context:component-scan base-package="com.springmvc.service"></context:component-scan>

    <!-- 静态资源访问 (第一种方法)-->
    <!--如果webapp下你新建了文件夹，想访问里面的静态资源，那么就要在这配置一下-->
    <!--<mvc:resources location="/WEB-INF/html/" mapping="../images/**"/>-->
    <!--<mvc:resources location="/WEB-INF/html/" mapping="../css/**"/>-->
    <!--<mvc:resources location="/WEB-INF/html/" mapping="/html/js/**"/>-->
    <!--<mvc:resources location="/WEB-INF/html/" mapping="../styles/**"/>-->
    <!--<mvc:resources location="/WEB-INF/html/" mapping="/**/*.html"/>-->
    <!--<mvc:resources location="/WEB-INF/html/" mapping="/**/*.ico"/>-->
    <!--<mvc:resources location="/WEB-INF/" mapping="images/**"/>-->
    <!--<mvc:resources location="/WEB-INF/" mapping="js/**"/>-->
    <!--<mvc:resources location="/WEB-INF/" mapping="css/**"/>-->
    <!--<mvc:resources location="/WEB-INF/html/" mapping="/**/*.css"/>-->
    <!--<mvc:resources location="/WEB-INF/html/" mapping="/**/*.png"/>-->
    <!--<mvc:resources location="/WEB-INF/html/" mapping="/**/*.gif"/>-->
    <!--<mvc:resources location="/WEB-INF/html/" mapping="/**/*.jpg"/>-->
    <!--<mvc:resources location="/WEB-INF/html/" mapping="/**/*.ttf"/>-->
    <!--<mvc:resources location="/WEB-INF/html/" mapping="/**/*.woff"/>-->
    <!--<mvc:resources location="/WEB-INF/html/" mapping="/**/*.woff2"/>-->

    <!-- 配置视图解析器，把控制器的逻辑视频映射为真正的视图 -->
    <!-- /WEB-INF/views/start.html -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/html/"/>
        <property name="suffix" value=".html"/>
    </bean>

    <!--  从请求和响应读取/编写字符串 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 用于将对象转换为 JSON  -->
    <bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>

    <!-- Configures the @Controller programming model
    <mvc:annotation-driven />-->
    <!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
    <!--org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter-->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/>
                <ref bean="jsonConverter" />
            </list>
        </property>
    </bean>

    <!-- 配置dbcp数据库连接池 -->

    <!-- <context:property-placeholder location="classpath:db.properties"/> -->
    <!--数据库配置 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
            </list>
        </property>
    </bean>

    <!-- 数据库连接池 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <property name="maxWait" value="${jdbc.maxWait}"/>
    </bean>

    <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--启用默认Servlet (第二种方法)-->
    <mvc:default-servlet-handler/>

    <!-- 拦截器 -->
    <mvc:interceptors>
        <!-- 登录拦截 -->
        <mvc:interceptor>
            <!--
               /**的意思是所有文件夹及里面的子文件夹
               /*是所有文件夹，不含子文件夹
               /是web项目的根目录
             -->
            <mvc:mapping path="/"/>
            <!-- 需排除拦截的地址 -->
            <!--<mvc:exclude-mapping path="/userController/login"/>-->
            <!--<mvc:exclude-mapping path="/html/js//**"/>-->
            <!--<mvc:exclude-mapping path="/html/css/**"/>-->
            <!--<mvc:exclude-mapping path="/html/images/**"/>-->
            <!--<mvc:exclude-mapping path="/html/styles/**"/>-->

            <bean id="Interceptor" class="com.springmvc.Filter.Interceptor" />
            <!--这个类就是我们自定义的Interceptor -->

            <!-- 国际化操作拦截器 如果采用基于（请求/Session/Cookie）则必需配置 -->
            <!--<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>-->
        </mvc:interceptor>
    </mvc:interceptors>
    <!-- 定义无Controller的path<->view直接映射 -->
    <!-- <mvc:view-controller path="/" view-name="redirect:/" /> -->

    <!-- 配置会话工厂SqlSessionFactory -->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:sqlmap/*Mapper.xml"/>
        <property name="typeAliasesPackage" value="com.springmvc.entity" />
    </bean>

    <!-- 在spring容器中配置mapper的扫描器产生的动态代理对象在spring的容器中自动注册，bean的id就是mapper类名（首字母小写）-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定扫描包的路径，就是mapper接口的路径，多个包中间以 半角逗号隔开   -->
        <property name="basePackage" value="com.springmvc.dao"/>
        <!-- 配置sqlSessionFactoryBeanName -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

</beans>